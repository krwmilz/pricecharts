#!/usr/bin/env perl

use strict;
use warnings;

use Config::Grammar;
use Getopt::Std;
use File::Copy;
use PriceChart;
use Template;
use URI::Escape;


my %args;
getopts("v", \%args);

$| = 1 if ($args{v});

my $cfg = get_config();
my $dbh = get_dbh($cfg->{http}, undef, $args{v});

my $work_dir =  $cfg->{http}{chroot} . $cfg->{http}{htdocs};
print "info: working dir: $work_dir\n" if ($args{v});

# rock a new template
my $config = {
	INTERPOLATE => 1, POST_CHOMP => 1, EVAL_PERL => 1,
	INCLUDE_PATH => "$work_dir/tt", OUTPUT_PATH => $work_dir
};
my $template = Template->new($config)
	|| die Template->error() . "\n";

#
# manufacturers/*
#
xmkdir "$work_dir/manufacturers";

my $sql = "select distinct lower(manufacturer), manufacturer from products";
my ($manufacturers, $total) = ($dbh->selectall_arrayref($sql), 0);

my $m = scalar @$manufacturers;
print "info: gen manufacturers/ ($m pages total)\n" if ($args{v});
for (@$manufacturers) {
	my ($manufacturer_lc, $manufacturer) = @$_;

	$sql = "select part_num, manufacturer, description, lower(manufacturer) " .
		"as manufacturer_lc from products where lower(manufacturer) = ?";
	my $products = $dbh->selectall_hashref($sql, "part_num", undef, $manufacturer_lc);
	$total += scalar keys %$products;

	my $vars = {
		name => $manufacturer, name_lc => $manufacturer_lc,
		num_products => scalar keys %$products, products => $products,
	};
	$template->process("chart_list.tt", $vars,
		"manufacturers/$manufacturer_lc.html")
		or die "error: template: " . $template->error() . "\n";
}

#
# manufacturers.html
#
my $vars = {
	name => "Manufacturers", dir_prefix => "manufacturers",
	num => $m, manufacturers => $manufacturers,
};
print "info: gen manufacturers.html\n" if ($args{v});
$template->process("link_list.tt", $vars, "manufacturers.html")
	or die "error: template: " . $template->error() . "\n";

#
# retailers/*
#
xmkdir "$work_dir/retailers";

$sql = "select distinct lower(vendor), vendor from prices";
my ($retailers, $total) = ($dbh->selectall_arrayref($sql), 0);

my $v = scalar @$retailers;
print "info: gen retailers/ ($v pages total)\n" if ($args{v});
for (@$retailers) {
	my ($retailer_lc, $retailer) = @$_;

	my $parts_sql = "select distinct part_num from prices where vendor = ?";
	my $part_nums = $dbh->selectall_hashref($parts_sql, "part_num", undef, $retailer);
	$total += scalar keys %$part_nums;

	my $vars = {
		name => $retailer, name_lc => $retailer_lc,
		num_products => scalar keys %$part_nums, products => $part_nums,
	};

	$template->process("chart_list.tt", $vars, "retailers/$retailer_lc.html")
		or die "error: template: " . $template->error() . "\n";
}

#
# retailers.html
#
$vars = {
	name => "Retailers", dir_prefix => "retailers",
	num => scalar @$retailers, manufacturers => $retailers,
};
print "info: gen retailers.html\n" if ($args{v});
$template->process("link_list.tt", $vars, "retailers.html")
	or die "error: template: " . $template->error() . "\n";

#
# products/*
#
xmkdir "$work_dir/products";
my $products = $dbh->selectall_hashref("select * from products", "part_num");

my $p = scalar keys %$products;
print "info: gen products/ ($p pages total)\n" if ($args{v});
for my $part_num (keys %$products) {
	my $part_num_lc = lc($part_num);
	$products->{$part_num}{manufacturer_lc} = lc($products->{$part_num}{manufacturer});

	# xmkdir("$work_dir/products/$result_lc.html", $args{v});
	$template->process("product.tt", $products->{$part_num},
		"products/$part_num_lc.html")
		or die "error: template: " . $template->error() . "\n";
}

# get a list of products added within the last week
my $time = time - (7 * 24 * 60 * 60);
$sql = "select manufacturer, part_num, lower(part_num) from products where first_seen > $time";
my $new_products = $dbh->selectall_arrayref($sql);

#
# index.html
#
$vars = {
	num_retailers => $v, num_manufacturers => $m, num_products => $p,
	num_new => scalar @$new_products, new_products => $new_products,
};
print "info: gen index.html\n";
$template->process("index.tt", $vars, "index.html")
	or die "error: template: " . $template->error() . "\n";

$dbh->disconnect();
