#!/usr/bin/env perl

use strict;
use warnings;

use Config::Grammar;
use Getopt::Std;
use File::Copy;
use PriceChart;
use Template;
use Time::Piece;
use URI::Escape;


my %args;
getopts("v", \%args);

$| = 1 if ($args{v});

my $cfg = get_config();
my $dbh = get_dbh($cfg->{http}, undef, $args{v});

my $work_dir =  $cfg->{http}{chroot} . $cfg->{http}{htdocs};
print "info: working dir: $work_dir\n" if ($args{v});

# rock a new template
my $config = {
	INTERPOLATE => 1, POST_CHOMP => 1, EVAL_PERL => 1,
	INCLUDE_PATH => "$work_dir/tt", OUTPUT_PATH => $work_dir
};
my $template = Template->new($config)
	|| die "template: . " . Template->error() . "\n";

#
# manufacturers/*
#
xmkdir "$work_dir/manufacturers";

my $sql = "select distinct manufacturer from products";
my $manufacturers = $dbh->selectcol_arrayref($sql);

my $m = scalar @$manufacturers;
print "info: gen manufacturers/ ($m pages total)\n" if ($args{v});
for my $manufacturer (@$manufacturers) {
	my $manufacturer_lc = lc($manufacturer);

	$sql = "select manufacturer, part_num from products where " .
		"lower(manufacturer) = ?";
	my $products = $dbh->selectall_arrayref($sql, undef, $manufacturer_lc);
	while (my $i = each (@$products)) {
		$products->[$i][2] = get_description($products->[$i][0], $products->[$i][1]);
	}

	my $vars = {
		name => $manufacturer, num => scalar @$products,
		products => $products,
	};
	$template->process("chart_list.tt", $vars,
		"manufacturers/$manufacturer_lc.html")
		|| die "template: " . $template->error() . "\n";
}

#
# manufacturers.html
#
print "info: gen manufacturers.html\n" if ($args{v});

my $vars = { name => "Manufacturers", num => $m, links => $manufacturers };
$template->process("link_list.tt", $vars, "manufacturers.html")
	|| die "template: " . $template->error() . "\n";

#
# retailers/*
#
xmkdir "$work_dir/retailers";

$sql = "select distinct retailer from prices";
my $retailers = $dbh->selectcol_arrayref($sql);

my $v = scalar @$retailers;
print "info: gen retailers/ ($v pages total)\n" if ($args{v});
for my $retailer (@$retailers) {
	my $retailer_lc = lc($retailer);

	$sql = "select manufacturer, part_num from prices where retailer = ?";
	my $products = $dbh->selectall_arrayref($sql, undef, $retailer);
	while (my $i = each (@$products)) {
		$products->[$i][2] = get_description($products->[$i][0], $products->[$i][1]);
	}

	my $vars = {
		name => $retailer, num => scalar @$products,
		products => $products,
	};

	$template->process("chart_list.tt", $vars, "retailers/$retailer_lc.html")
		|| die "template: " . $template->error() . "\n";
}

#
# retailers.html
#
print "info: gen retailers.html\n" if ($args{v});

$vars = { name => "Retailers", num => $v, links => $retailers };
$template->process("link_list.tt", $vars, "retailers.html")
	|| die "template: " . $template->error() . "\n";

#
# product_types/*
#
xmkdir("$work_dir/product_types");

$sql = "select distinct type from products";
my $product_types = $dbh->selectcol_arrayref($sql);

my $t = scalar @$product_types;
print "info: gen product_types/ ($t types total)\n" if ($args{v});
for my $type (@$product_types) {
	my $type_lc = lc($type);

	$sql = "select manufacturer, part_num from products where type = ?";
	my $products = $dbh->selectall_arrayref($sql, undef, $type);
	while (my $i = each (@$products)) {
		$products->[$i][2] = get_description($products->[$i][0], $products->[$i][1]);
	}

	my $vars = {
		name => $type, num => scalar @$products,
		products => $products,
	};

	$template->process("chart_list.tt", $vars, "product_types/$type_lc.html")
		|| die "template: " . $template->error() . "\n";
}

#
# product_types.html
#
print "info: gen product_types.html\n" if ($args{v});

$vars = { name => "Product_Types", num => $t, links => $product_types };
$template->process("link_list.tt", $vars, "product_types.html")
	|| die "template: " . $template->error() . "\n";

#
# products/*
#
xmkdir "$work_dir/products";

$sql = "select * from products";
my $products = $dbh->selectall_hashref($sql, "part_num");

my $p = scalar keys %$products;
print "info: gen products/ ($p pages total)\n" if ($args{v});
while (my ($part_num, $row) = each %$products) {
	my $part_num_lc = lc($part_num);
	$row->{description} = get_description($row->{manufacturer}, $row->{part_num});

	# xmkdir("$work_dir/products/$result_lc.html", $args{v});
	$template->process("product.tt", $row, "products/$part_num_lc.html")
		|| die "template: " . $template->error() . "\n";
}

# get a list of products added within the last week
$sql = "select manufacturer, part_num from products where first_seen > ?";
my $news = $dbh->selectall_arrayref($sql, undef, time - (7 * 24 * 60 * 60));

$sql = "select manufacturer, part_num from products where last_seen > ?";
my $upds = $dbh->selectall_arrayref($sql, undef, time - (2 * 60 * 60));

#
# index.html
#
$vars = {
	nret => $v, nmanuf => $m, nprod => $p, nnew => scalar @$news,
	news => $news, nupd => scalar @$upds, upds => $upds
};
print "info: gen index.html\n" if ($args{v});
$template->process("index.tt", $vars, "index.html")
	|| die "template: " . $template->error() . "\n";

$dbh->disconnect();

sub get_description
{
	my $manufacturer = shift;
	my $part_num = shift;

	my $sql = "select description from descriptions where " .
		"manufacturer = ? and part_num = ? order by date";
	my $descriptions = $dbh->selectcol_arrayref($sql, undef, $manufacturer,
		$part_num);

	# for now just return the first one ever scraped
	# XXX: leaving as is for cool future improvements (string interpolation!)
	return $descriptions->[0];
}
