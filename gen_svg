#!/usr/bin/env perl

use strict;
use warnings;

use Config::Grammar;
use Getopt::Std;
use SVG;
use POSIX;
use PriceChart;


my %args;
getopts("anv", \%args);

$| = 1 if ($args{v});

my $cfg = get_config();
my $dbh = get_dbh($cfg->{http}, undef, $args{v});

my $svg_dir = $cfg->{http}{chroot} . $cfg->{http}{htdocs} . "/svg";

# we don't output svg's when -n is given
print "info: svg output dir is $svg_dir\n" if ($args{v} && !$args{n});

my ($left, $center, $right, $top, $middle, $bottom) = (10, 945, 45, 10, 150, 20);
my $width = $right + $center + $left;
my $height = $top + $middle + $bottom;

print "info: r, c, l, w = $right, $center, $left, $width\n" if ($args{v});
print "info: b, m, t, h = $bottom, $middle, $top, $height\n" if ($args{v});

my $where_clause = $args{a} ? "" : "where svg_stale = 1";
my $sql = "select manufacturer, part_num from products $where_clause";
my $parts_sth = $dbh->prepare($sql);

$sql = "select distinct retailer from prices where part_num = ? and manufacturer = ?";
my $retailer_sth = $dbh->prepare($sql);

$sql = "select date, price from prices where " .
	"part_num = ? and retailer = ? order by date";
my $point_sth = $dbh->prepare($sql);

$sql = "update products set svg_stale = 0 where manufacturer = ? and part_num = ?";
my $success_sth = $dbh->prepare($sql);

$parts_sth->execute();
print "info: generating  " if ($args{v});
my ($raw_total, $rendered_total, $points, $series) = (0, 0, 0, 0);
while (my ($manufacturer, $part_num) = $parts_sth->fetchrow_array()) {
	$raw_total++;
	spin() if ($args{v});

	# make sure we have at least two prices to work with
	$sql = "select min(date), max(date), min(price), max(price) " .
		"from prices where part_num = ? and manufacturer = ?";
	my ($x_min, $x_max, $y_min, $y_max) =
		$dbh->selectrow_array($sql, undef, $part_num, $manufacturer);
	next unless (defined $x_min);

	$y_max = ceil($y_max / 10) * 10;
	$y_min = floor($y_min / 10) * 10;

	my ($domain, $range) = ($x_max - $x_min, $y_max - $y_min);
	$domain = 24 * 60 * 60 if ($domain <= 0);
	$range = 20 if ($range < 20);

	# clamp the total size of this thing with viewBox
	my $svg = SVG->new(viewBox => "0 0 $width $height");
	$svg->style(type => "text/css", -href => "/pricechart.css");
	my ($x_scale, $y_scale) = ($center / $domain, $middle / $range);

	# $svg->rect(x => 0, y => 0, width => $width, height => $height,
	# 	class => "chart_bg");

	# make price labels along right side and lines across chart
	my $num_labels = 5;
	for (1..$num_labels) {
		my $price = ceil($y_max - $range * $_ / $num_labels);
		my $y = $top + $middle * ($_ - 1) / ($num_labels - 1);

		$svg->text(
			id => "price_$_", x => $left + $center + 5, y => $y + 3,
			class => "chart_price", "text-anchor" => "start"
		)->cdata("\$$price");

		$svg->line(
			id => "line_$_", x1 => $left, y1 => $y,
			x2 => $width - $right, y2 => $y,
			class => "chart_rulers",
		);
	}

	# make dates along the bottom
	if ($domain == 0) {
		$num_labels = 1;
	}
	for (1..$num_labels) {
		my $time = $x_min + $_ * $domain / $num_labels;
		my $date = strftime "%b %e %Y", localtime($time);
		my $x = $left + ($_ - 1) / ($num_labels - 1) * $center;

		# make the dates not hang off the ends of the chart
		my $text_anchor = "middle";
		$text_anchor = "start" if ($_ == 1);
		$text_anchor = "end" if ($_ == $num_labels);

		# print the dates along the x axis
		$svg->text(
			id => "date_$time", x => $x, y => $height,
			class => "chart_date", "text-anchor" => $text_anchor
		)->cdata($date);

		# print the little tick marks down from the x axis
		my $x_axis = $top + $middle;
		$svg->line(
			id => "date_marker_$_", x1 => $x, y1 => $x_axis,
			x2 => $x, y2 => $x_axis + 5, class => "chart_rulers",
		);
	}

	# each series on the chart represents a retailers prices
	$retailer_sth->execute($part_num, $manufacturer);
	while (my ($retailer) = $retailer_sth->fetchrow_array()) {
		my (@xs, @ys);
		my ($last_y, $last_price) = ("#000", 0, 0);

		my $retailer_id = lc($retailer);
		$retailer_id =~ s/ /_/;

		$sql = "select url, color from retailers where name = ?";
		my ($url, $color) = $dbh->selectrow_array($sql, undef, $retailer);

		# xlink:href's don't like raw ampersands
		$url =~ s/&/&amp;/g;

		# get all prices that we've scraped per product per retailer
		$point_sth->execute($part_num, $retailer);
		while (my ($date, $price) = $point_sth->fetchrow_array) {
			# transform and clamp real world coordinates
			push @xs, ($date - $x_min) * $x_scale + $left;
			push @ys, $height - $bottom - ($price - $y_min) * $y_scale;

			# small filled in circles to indicate data points
			$svg->anchor(
				-href => $url . $part_num,
				target => "new_window"
			)->circle(
				cx => $xs[-1], cy => $ys[-1], r => 2,
				style => { "fill" => "#$color",
					"stroke" => "#$color" }
			);

			$last_y = $ys[-1];
			$last_price = $price;
			$points++;
		}

		# helper to get svg path coordinates easily
		my $points = $svg->get_path(x => \@xs, y => \@ys, -type => "path");

		# path sucks, spline would look nicer
		$svg->anchor(-href => $url . $part_num,
			target => "new_window"
		)->path(
			%$points, id => "path_$retailer_id",
			class => "chart_series",
			style => { fill => "#$color", stroke => "#$color" }
		);

		# prepare the for the textPath definition
		my $id = "text_path_$retailer_id";
		$svg->defs()->path(
			%$points, id => $id,
		);

		# show retailer name along the start of the path
		$svg->text(class => "chart_series_text", fill => "#$color"
		)->tag("textPath", "xlink:href" => "#$id")->tag("tspan", "dy" => "-5",
		)->cdata($retailer);

		# really, you only care about the latest price difference
		# $svg->text(
		# 	id => "price_for_$retailer_id", x => $left + $center + 5,
		# 	y => $last_y + 5,
		# 	style => "font-size: 12px; fill: #000",
		# 	"text-anchor" => "start"
		# )->cdata("\$$last_price");

		$series++;
	}

	# when graph is loaded make a sliding motion show the graph lines
	# my $mask = $svg->rectangle(
	# 	x => 0, y => 0, width => 1000, height => 250, rx => 0, ry => 0,
	# 	id => "mask", fill => "#FFF"
	# );
	# $mask->animate(
	# 	attributeName => "x", values => "0;1000", dur => "0.2s",
	# 	fill => "freeze", -method => ""
	# );

	next if ($args{n});

	# all links lower case
	my $part_num_cased = $part_num;
	$part_num = lc($part_num);

	# giant hack, if the part number has / in it, make some directories
	if ($part_num =~ /\//) {
		my $needed_dirs = substr($part_num, 0, rindex($part_num, '/'));
		make_path("$svg_dir/$needed_dirs", { verbose => $args{v} });
	}
	open my $svg_fh, ">", "$svg_dir/$part_num.svg" or
		die "couldn't open $svg_dir/$part_num: $!";

	# XXX: not sure how to add this programatically, hack around for now
	my @buf = split("\n", $svg->xmlify);
	my $css_include = "<?xml-stylesheet href=\"/pricechart.css\" type=\"text/css\"?>";
	# must be the second line
	splice (@buf, 1, 0, ($css_include));

	print $svg_fh "$_\n" for (@buf);
	close $svg_fh;

	# we outputted something to a file, consider this a success
	$success_sth->execute($manufacturer, $part_num_cased);
	$rendered_total++;
}

if ($args{v}) {
	print "\n";
	printf "info: %i svg's rendered (%i skipped), %i series (%i points)\n",
		$rendered_total, $raw_total - $rendered_total, $series, $points;
}

$dbh->disconnect();

my $state = 0;
sub spin
{
	my @spin_states = ("-", "\\", "|", "/");

	print "\b";
	print $spin_states[++$state % 4];
}
