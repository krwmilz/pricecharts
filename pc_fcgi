#!/usr/bin/env perl

use strict;
use warnings;

# because we chroot all dependencies must be explicitly listed
use Config::Grammar;
use DBD::SQLite;
use Encode;
use FCGI;
use Getopt::Std;
use Template;
use Template::Context;
use Template::Filters;
use Template::Iterator;
use Template::Parser;
use Template::Plugins;
use Template::Stash::XS;
use PriceChart;
use Unix::Syslog qw(:macros :subs);
use URI::Escape;


my %args;
getopts("v", \%args);

# fork into background unless verbose
unless ($args{v}) {
	exit if (fork());
}

my $cfg = get_config();
my %http_cfg = %{$cfg->{"http"}};

# translates user/group names to id's, needs to be before chroot
my $uid_name = $http_cfg{"uid"};
my $gid_name = $http_cfg{"gid"};
my $uid = getpwnam($uid_name) or die "error: user $uid_name does not exist\n";
my $gid = getgrnam($gid_name) or die "error: group $gid_name does not exist\n";
print "info: $uid_name:$gid_name -> $uid:$gid\n" if ($args{v});;

# chroot early
print "info: chrooting to $http_cfg{chroot}\n" if ($args{v});
chroot($http_cfg{"chroot"});
chdir("/");

# XXX: verify we have indeed dropped privileges?
$( = $) = "$gid $gid";
$< = $> = $uid;
print "info: uid:gid set to $<:$(\n" if ($args{v});

print "info: opening syslog\n" if ($args{v});
openlog("pc_fcgi", LOG_PID, LOG_DAEMON);

if (-e $http_cfg{socket}) {
	my $msg = "socket $http_cfg{socket} exists, not starting\n";
	print "error: $msg\n" if ($args{v});
	syslog(LOG_ERR, $msg);
	exit;
}

# XXX: i need to be sudo for this to work? after we've dropped privileges?
print "info: opening $http_cfg{socket}\n" if ($args{v});
my $socket = FCGI::OpenSocket($http_cfg{socket}, 1024);

my $dbh = get_dbh($cfg->{"http"}, $http_cfg{db_dir}, $args{v});
my $request = FCGI::Request(\*STDIN, \*STDOUT, \*STDERR, \%ENV, $socket,
	FCGI::FAIL_ACCEPT_ON_INTR);

print "info: making template, include_path = $http_cfg{htdocs}\n" if ($args{v});
my $config = { INCLUDE_PATH => "$http_cfg{htdocs}/tt" };
my $template = Template->new($config) || die $Template::ERROR . "\n";

# try hard here not to use EVAL_PERL in the template
my $sql = "select distinct manufacturer, part_num " .
	"from prices where part_num like ? or manufacturer like ?";
my $search_sth = $dbh->prepare($sql);

# intercept signals to shut down cleanly
$SIG{INT} =  \&child_sig;
$SIG{TERM} = \&child_sig;

syslog(LOG_INFO, "startup");
my $requests_total = 0;
while ($request->Accept() >= 0) {
	print "Content-Type: text/html\r\n\r\n";
	my (undef, $input) = split("=", $ENV{QUERY_STRING});

	# incoming query string is http mangled
	$input = uri_unescape($input);

	# fuzzy search on manufacturer and part number
	$search_sth->execute("%$input%", "%$input%");
	my $products = $search_sth->fetchall_arrayref();

	my $vars = { query => $input, results => $products };
	$template->process("search.tt", $vars)
		|| print "template: " . $template->error();
	$requests_total++;
}
syslog(LOG_INFO, "shutdown, $requests_total total requests served");
closelog();

$search_sth = undef;
$dbh->disconnect();

FCGI::CloseSocket($socket);
unlink($http_cfg{socket}) or print "error: could not unlink $http_cfg{socket}: $!";

sub child_sig
{
	my $signame = shift;

	$request->LastCall();
	print "info: caught SIG$signame\n" if ($args{v});
}
