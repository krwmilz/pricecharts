#!/usr/bin/env perl

use strict;
use warnings;

use Config::Grammar;
use Email::Simple;
use Email::Send;
use Getopt::Std;
use HTML::Grabber;
use IO::Tee;
use LWP::Simple;
use PriceSloth;
use Term::ReadKey;
use POSIX;


my %args;
getopts("tv", \%args);

$| = 1 if ($args{v});

my $cfg = get_config();
my $ua  = new_ua($cfg->{general}, $args{v});
my $dbh = get_dbh($cfg->{general}{db_dir}, $args{v});
my $tmp_file = "/tmp/product_scraper.txt";
my $log = get_log($tmp_file, $args{v});
srand;

$dbh->do(qq{
	create table if not exists products(
		manufacturer text not null,
		part_num text not null,
		retailer text not null,
		type text,
		first_seen int,
		last_seen int,
		last_scraped int,
		svg_stale int default 1,
		primary key(manufacturer, part_num))
}) or die $DBI::errstr;

$dbh->do(qq{
	create table if not exists descriptions(
		manufacturer text not null,
		part_num text not null,
		retailer text not null,
		description text not null,
		date int not null,
		primary key(manufacturer, part_num, retailer, description),
		foreign key(manufacturer, part_num) references
			products(manufacturer, part_num))
}) or die $DBI::errstr;

# $dbh->do("create table if not exists scrapes");

my $sql = "insert into products(part_num, manufacturer, retailer, type, " .
	"first_seen, last_seen, last_scraped) values (?, ?, ?, ?, ?, ?, ?)";
my $insert_sth = $dbh->prepare($sql);

$sql = "insert or replace into descriptions(manufacturer, part_num, retailer, ".
	"description, date) values (?, ?, ?, ?, ?)";
my $descriptions_sth = $dbh->prepare($sql);

# also update description, manufacturer?
$sql = "update products set last_seen = ? where part_num = ?";
my $update_sth = $dbh->prepare($sql);

#
# Memory Express
#
print $log "Memory Express\n==============\n\n";
print $log "type                 ok percent errors new duration\n";
print $log "--------------- ------- ------- ------ --- --------\n";

my %product_map = (
	"Television" => "Televisions",
	"Laptop" => "LaptopsNotebooks",
	"Hard Drive" => "HardDrives",
	"Memory" => "Memory",
	"Video Card" => "VideoCards",
	"Processor" => "Processors"
);
while (my ($type, $name) = each %product_map) {
	mem_exp_scrape_class($type, $name);
}

$update_sth = undef;
$insert_sth = undef;
$dbh->disconnect();
$log->close();
send_email($args{v});

#
# scrape an entire class of products, inserting or updating the db as needed.
# general flow is get all thumbnails on the unfiltered search results page, then
# for each of these get the part number, brand, and description.
#
sub mem_exp_scrape_class
{
	my $type = shift;
	my $name = shift;
	my $info_hdr = "info: " . lc($type);

	my $thumbnails = mem_exp_get_thumbnails($name, $info_hdr);
	return undef unless defined $thumbnails;

	my $total = scalar @$thumbnails;
	print "$info_hdr: $total total\n" if ($args{v});

	# randomize the combined results so we don't linearly visit them
	my @rand_thumbnails = sort { rand > .5 } @$thumbnails;

	# extract and store part number, brand, and description
	my ($new, $old, $err, $start, $i) = (0, 0, 0, time, 0);
	for my $thumbnail_html (@rand_thumbnails) {
		$i++;
		my $thumb_hdr = "$info_hdr: $i/$total";

		# look less suspicious
		sleep_rand($thumb_hdr, 20);

		# attempt to extract information from thumbnail html
		my ($brand, $part_num, $desc) =
			mem_exp_scrape_thumbnail("$type: $i/$total", $thumbnail_html);
		unless (defined $brand && defined $part_num && defined $desc) {
			$err++;
			next;
		}

		$descriptions_sth->execute($brand, $part_num, "Memory Express", $desc, time);

		# extraction looks good, insert or update the database
		$sql = "select * from products where part_num = ?";
		if ($dbh->selectrow_arrayref($sql, undef, $part_num)) {
			# also check description and manufacturer are consistent?
			$update_sth->execute(time, $part_num) or die $dbh->errstr();
			print "$thumb_hdr: updated db\n" if ($args{v});
			$old++;
		}
		else {
			$sql = qq{select manufacturer from products where
				lower(manufacturer) = ?};
			my $manufs = $dbh->selectcol_arrayref($sql, undef, lc($brand));
			if ($manufs) {
				# take a risk that the first one is spelled right
				if ($manufs->[0] ne $brand) {
					print "warn: forcing misspelled $brand to ";
					print $manufs->[0] . "\n";
					$brand = $manufs->[0];
				}
			}

			$insert_sth->execute($part_num, $brand, "Memory Express", $type,
				time, time, 0) or die $dbh->errstr();
			print "$thumb_hdr: inserted into db\n" if ($args{v});
			$new++;
		}
	}

	my $ok = $new + $old;
	my $time_str = sprintf("%dh %dm %ds", (gmtime(time - $start))[2, 1, 0]);
	print $log sprintf("%-15s %7s %6.1f%% %6i %3i %s\n", lc($type),
		"$ok/$total", $ok * 100.0 / $total, $err, $new, $time_str);
}

#
# get all thumbnails from generic unfiltered search page
#
sub mem_exp_get_thumbnails
{
	my $name = shift;
	my $info_hdr = shift;

	# this returns a search results page, link found through trial and error
	my $class_url = "http://www.memoryexpress.com/Category/" .
		"$name?PageSize=40&Page=";

	# get first page of results
	my $dom = get_dom($class_url . "1", $ua, $args{v}, $log);
	return undef if (!defined $dom);

	my $pager_hdr = "$info_hdr: .AJAX_List_Pager";

	# extract the first of two pager widgets on the page
	my ($pager_html) = $dom->find(".AJAX_List_Pager")->html_array();
	return undef if (!defined $pager_html);
	print "$pager_hdr found\n" if ($args{v});

	# find how many pages of results we have, each page is one <li> element
	my $pager = HTML::Grabber->new(html => $pager_html);
	my $pages = $pager->find("li")->html_array();
	return undef unless ($pages);

	# if more than 1 <li> is found, one <li> is always a "next" arrow
	$pages-- if ($pages > 1);
	print "$pager_hdr: $pages pages\n" if ($args{v});

	# loop over results pages and append product thumbnails
	my @thumbnails;
	for (1..$pages) {
		my $page_hdr = "$pager_hdr: $_/$pages";
		sleep_rand($page_hdr, 5);

		# get a search pages dom
		$dom = get_dom($class_url . "$_", $ua, $args{v}, $log);
		next if (!defined $dom);

		# each product thumbnail has class=PIV_Regular
		my @temp_thumbs = $dom->find(".PIV_Regular")->html_array();
		if ($args{t}) {
			@temp_thumbs = ($temp_thumbs[0]);
		}
		my $num_thumbs = scalar @temp_thumbs;
		print "$page_hdr: $num_thumbs thumbs found\n" if ($args{v});
		push @thumbnails, @temp_thumbs;

		last if ($args{t});
	}

	return \@thumbnails;
}

#
# this checks the input html for 3 things, part num, manufacturer, and
# description. if any of these aren't found, fail.
#
sub mem_exp_scrape_thumbnail
{
	my $thumb_hdr = shift;
	my $html = shift;

	my $error_hdr = "error: $thumb_hdr";
	my $info_hdr = "info: $thumb_hdr";

	# make new html grabber instance with the thumbnail html
	my $dom = HTML::Grabber->new(html => $html);

	# has to be found otherwise we can't do anything
	my $product_id = get_tag_text($dom, ".ProductId", $error_hdr);
	return undef unless defined $product_id;

	# visit the extended description page
	my $product_url = "http://www.memoryexpress.com/Products/";
	my $product_dom = get_dom("$product_url$product_id", $ua, $args{v}, $log);

	# the part number is inside of id=ProductAdd always
	my $part_num = get_tag_text($product_dom, "#ProductAdd", $error_hdr);
	return undef unless defined $part_num;

	# extract the part number, always is text inside of the tag
	($part_num) = ($part_num =~ m/Part #:\s*(.*)\r/);
	if (!defined $part_num) {
		print $log "$error_hdr: part num regex failed\n";
		return undef;
	}

	# extract the product description
	my $desc = get_tag_text($dom, ".ProductTitle", $error_hdr);
	return undef unless defined $desc;

	# extract the brand, sometimes shows up as text
	my $brand = $dom->find(".ProductBrand")->text();
	if ($brand eq "") {
		# and sometimes shows up inside the tag attributes
		$brand = $dom->find(".ProductBrand")->html();
		# XXX: revisit this regex, it should be less strict
		($brand) = ($brand =~ m/Brand: ([0-9A-Za-z\. ]+)/);
	}
	if (!defined $brand || $brand eq "") {
		print $log "$error_hdr: .ProductBrand not found, html was:\n";
		print $log "$html\n";
		return undef;
	}

	my $shortened_desc = trunc_line($desc, length($info_hdr) + 2);
	print "$info_hdr: $brand $part_num\n" if ($args{v});
	print "$info_hdr: $shortened_desc\n" if ($args{v});

	return ($brand, $part_num, $desc);
}

#
# unwrap the plain text inside of an html tag
#
sub get_tag_text
{
	my $dom = shift;
	my $tag = shift;
	my $error_hdr = shift;

	my $field = $dom->find($tag)->text();
	if (!defined $field || $field eq "") {
		print $log "$error_hdr: $tag not found or empty, html was:\n";
		print $log $dom->html() . "\n";
		return undef;
	}

	return $field;
}

#
# send an email with the summary of the scrape
#
sub send_email
{
	my $verbose = shift || 0;

	open my $fh, "<", $tmp_file or die "couldn't open $tmp_file: $!";
	my $mail;
	$mail .= $_ for (<$fh>);
	close $fh;
	unlink($tmp_file) or warn "couldn't unlink $tmp_file: $!";

	return if ($verbose);
	my $email = Email::Simple->create(
		header => [
			From	=> "Price Sloth <www\@pricesloth.com>",
			To	=> $cfg->{general}{email},
			Subject	=> "weekly product scrape",
		],
		body => $mail
	);

	my $sender = Email::Send->new({mailer => "SMTP"});
	$sender->mailer_args([Host => $cfg->{"general"}{"smtp"}]);
	$sender->send($email->as_string()) || print "Couldn't send email\n";
}

sub sleep_rand
{
	my $header = shift;
	my $upper_limit = shift || 0;

	my $sleep = int(rand($upper_limit));
	printf "$header: (%ss wait)\n", $sleep if ($args{v});
	sleep $sleep unless ($args{t});
}
