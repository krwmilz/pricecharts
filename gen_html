#!/usr/bin/env perl

use strict;
use warnings;

use Config::Grammar;
use Data::Dumper;
use File::Copy;
use Getopt::Std;
use Lingua::EN::Inflect qw(PL);
use POSIX qw(ceil);
use PriceChart;
use Template;
use Time::Piece;
use URI::Escape;


my %args;
getopts("v", \%args);

$| = 1 if ($args{v});

my $cfg = get_config();
my $dbh = get_dbh($cfg->{http}, undef, $args{v});

my $work_dir =  $cfg->{http}{chroot} . $cfg->{http}{htdocs};
print "info: working dir: $work_dir\n" if ($args{v});

# rock a new template
my $config = {
	INTERPOLATE => 1, POST_CHOMP => 1, EVAL_PERL => 1,
	INCLUDE_PATH => "$work_dir/tt", OUTPUT_PATH => $work_dir
};
my $template = Template->new($config)
	|| die "template: . " . Template->error() . "\n";

#
# manufacturers
#
my $sql = "select distinct lower(manufacturer) from prices group by manufacturer " .
	"having count(distinct part_num) > 1";
my $manufacturers = $dbh->selectcol_arrayref($sql);

my ($num_manuf, %summary, %logo_file) = (scalar @$manufacturers, (), ());
print "info: manufacturers  " if ($args{v});
for my $manufacturer (@$manufacturers) {
	spin() if ($args{v});

	# logo graphic can have many extensions
	my ($logo_file) = glob("$work_dir/logo/\"$manufacturer\".*");
	if ($logo_file) {
		$logo_file = substr($logo_file, rindex($logo_file, "/") + 1);
		$logo_file{$manufacturer} = $logo_file;
	}

	# take a risk and choose the first manufacturer as the proper spelling
	$sql = "select manufacturer from products where lower(manufacturer) = ?";
	my ($manufacturer_cased) = $dbh->selectrow_array($sql, undef, $manufacturer);

	# must have at least one price to show up from this
	$sql = qq{select distinct products.type from prices, products where
		prices.part_num = products.part_num and
		lower(prices.manufacturer) = lower(products.manufacturer) and
		lower(prices.manufacturer) = ?};
	my $types = $dbh->selectcol_arrayref($sql, undef, $manufacturer);

	# show product charts categorized first by type and then manufacturer
	for my $type (sort @$types) {
		$sql = qq{select distinct manufacturer, part_num
			from products where type = ? and
			lower(manufacturer) = ?};
		my $products = $dbh->selectall_arrayref($sql, undef, $type, $manufacturer);
		$_->[2] = get_description($_->[0], $_->[1]) for (@$products);

		my $n = scalar @$products;
		$type = PL($type, $n);
		my $type_link = lc($type);
		$type_link =~ s/ /_/;

		$summary{$manufacturer}{$type}{num} = $n;
		$summary{$manufacturer}{$type}{link} = "$manufacturer/$type_link";

		my $vars = {
			name => $manufacturer_cased, type => $type,
			products => $products, logo_file => $logo_file, num => $n
		};
		$template->process("chart_list.tt", $vars,
			"manufacturers/$manufacturer/$type_link.html")
			|| die "template: " . $template->error() . "\n";
	}
}
print "\n" if ($args{v});

my $vars = { name => "Manufacturers", list => \%summary, logo_file => \%logo_file };
$template->process("coarse_list.tt", $vars, "manufacturers.html")
	|| die "template: " . $template->error() . "\n";

exit;

#
# retailers/*
#
$sql = "select distinct retailer from prices";
my $retailers = $dbh->selectall_arrayref($sql);

$sql = qq{select count(distinct products.part_num), products.type
	from products, prices where products.part_num = prices.part_num and
	lower(products.manufacturer) = lower(prices.manufacturer) and
	prices.retailer = ?  group by products.type};
my $retailer_types_sth = $dbh->prepare($sql);

my ($num_retailers, $retailer_indexed) = (scalar @$retailers, 0);
print "info: gen retailers/ " if ($args{v});
for (@$retailers) {
	my ($retailer) = @$_;
	my $retailer_lc = lc($retailer);

	# must have at least one price
	$sql = "select distinct manufacturer, part_num from prices where retailer = ?";
	my $products = $dbh->selectall_arrayref($sql, undef, $retailer);
	$_->[2] = get_description($_->[0], $_->[1]) for (@$products);

	my $vars = {
		name => $retailer, num => scalar @$products,
		products => $products,
	};
	$template->process("chart_list.tt", $vars, "retailers/$retailer_lc.html")
		|| die "template: " . $template->error() . "\n";
	$retailer_indexed += @$products;

	$retailer_types_sth->execute($retailer);

	$_->[1] = "";
	my $first = 1;
	while (my ($count, $type) = $retailer_types_sth->fetchrow_array()) {
		$_->[1] .= ", " unless ($first);
		$_->[1] .= "$count " . PL($type, $count);
		$first = 0;
	}

	# need to quote manufacturer, knock off entire path after
	my ($logo_path) = glob("$work_dir/logo/\"$retailer_lc\".*");
	$_->[2] = substr($logo_path, rindex($logo_path, "/") + 1);
}
print "$num_retailers pages, $retailer_indexed indexed\n" if ($args{v});

#
# retailers.html
#
print "info: gen retailers.html\n" if ($args{v});
$vars = { name => "Retailers", links => $retailers };
$template->process("link_list.tt", $vars, "retailers.html")
	|| die "template: " . $template->error() . "\n";

#
# product_types/*
#
$sql = "select distinct type from products";
my $product_types = $dbh->selectall_arrayref($sql);

my ($num_types, $type_indexed) = (scalar @$product_types, 0);
print "info: gen product_types/ " if ($args{v});
for (@$product_types) {
	my ($type) = @$_;
	my $type_lc = lc($type);

	$sql = "select manufacturer, part_num from products where type = ?";
	my $products = $dbh->selectall_arrayref($sql, undef, $type);
	$_->[2] = get_description($_->[0], $_->[1]) for (@$products);

	my $vars = {
		name => $type, num => scalar @$products,
		products => $products,
	};
	$template->process("chart_list.tt", $vars, "product_types/$type_lc.html")
		|| die "template: " . $template->error() . "\n";

	$type_indexed += @$products;
	$_->[1] = scalar @$products;
}
print "$num_types pages, $type_indexed indexed\n" if ($args{v});

#
# product_types.html
#
print "info: gen product_types.html\n" if ($args{v});

my @types_sorted = sort {$b->[1] <=> $a->[1]} @$product_types;
$vars = { name => "Product_Types", links => \@types_sorted };
$template->process("link_list.tt", $vars, "product_types.html")
	|| die "template: " . $template->error() . "\n";

#
# products/*
#
$sql = "select * from products";
my $products = $dbh->selectall_hashref($sql, "part_num");

my $num_products = scalar keys %$products;
print "info: gen products/ $num_products pages\n" if ($args{v});
while (my ($part_num, $row) = each %$products) {
	my $part_num_lc = lc($part_num);
	my $manufacturer_lc = lc($row->{manufacturer});

	$row->{description} =
		get_description($row->{manufacturer}, $row->{part_num});

	# template makes directories if needed
	$template->process("product.tt", $row,
		"products/$manufacturer_lc/$part_num_lc.html")
		|| die "template: " . $template->error() . "\n";
}

# get a list of products added within the last week
$sql = "select manufacturer, part_num from products where first_seen > ?";
my $news = $dbh->selectall_arrayref($sql, undef, time - (7 * 24 * 60 * 60));
splice @$news, 20;

$sql = "select manufacturer, part_num from products where last_seen > ? order by last_seen";
my $upds = $dbh->selectall_arrayref($sql, undef, time - (1 * 60 * 60));

#
# index.html
#
$vars = {
	nret => $num_retailers, nmanuf => $num_manuf, nprod => $num_products,
	nnew => scalar @$news, news => $news, nupd => scalar @$upds, upds => $upds
};
print "info: gen index.html\n" if ($args{v});
$template->process("index.tt", $vars, "index.html")
	|| die "template: " . $template->error() . "\n";

$dbh->disconnect();

sub get_description
{
	my $manufacturer = shift;
	my $part_num = shift;

	my $sql = "select description from descriptions where " .
		"manufacturer = ? and part_num = ? order by date";
	my $descriptions = $dbh->selectcol_arrayref($sql, undef, $manufacturer,
		$part_num);
	unless (@$descriptions) {
		print "error: no descriptions for $manufacturer $part_num\n";
	}

	# pick the shortest non-zero description
	my $best = $descriptions->[0];
	for (@$descriptions) {
		next if ($_ eq "");
		$best = $_ if (length($_) < length($best));
	}

	return $best;
}
